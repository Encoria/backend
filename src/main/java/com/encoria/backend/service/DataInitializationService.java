package com.encoria.backend.service;

import com.encoria.backend.model.UserRole;
import com.encoria.backend.repository.UserRoleRepository;
import jakarta.annotation.PostConstruct; // Import PostConstruct
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j; // Optional: for logging
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
@Slf4j // Optional: Lombok annotation for logging
public class DataInitializationService {

    private final UserRoleRepository userRoleRepository;

    // Role Codes (Define constants for role codes)
    public static final String ROLE_USER = "USER";
    public static final String ROLE_ADMIN = "ADMIN"; // Example if you add more later

    @PostConstruct // This method runs after the bean is created and dependencies are injected
    @Transactional // Ensure database operations happen within a transaction
    public void initializeData() {
        log.info("Checking and initializing default data..."); // Optional logging

        // Initialize User Roles
        initializeRole(ROLE_USER);
        initializeRole(ROLE_ADMIN); // Add calls for other roles if needed

        log.info("Data initialization complete."); // Optional logging
    }

    private void initializeRole(String roleCode) {
        // Check if the role already exists
        if (!userRoleRepository.findByCode(roleCode).isPresent()) {
            // If not, create and save it
            UserRole newRole = new UserRole();
            newRole.setCode(roleCode);
            // Note: ID will be generated by the sequence automatically upon saving
            userRoleRepository.save(newRole);
            log.info("Created default role: {}", roleCode); // Optional logging
        } else {
            log.info("Role {} already exists.", roleCode); // Optional logging
        }
    }
}